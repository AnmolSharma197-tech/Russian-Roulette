<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Russian Roulette Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f3f4f6;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .game-container {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            text-align: center;
            max-width: 400px;
            width: 100%;
        }
        .button {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            font-size: 18px;
            cursor: pointer;
            border-radius: 5px;
            margin-top: 20px;
            transition: background-color 0.3s;
        }
        .button:hover {
            background-color: #45a049;
        }
        .game-message {
            margin: 20px 0;
            font-size: 18px;
        }
        .login-form {
            display: block;
            margin-top: 20px;
        }
        .login-form input {
            padding: 10px;
            margin: 5px;
            font-size: 16px;
            width: 100%;
        }
        .login-form button {
            background-color: #2196F3;
            border: none;
            color: white;
            padding: 10px;
            width: 100%;
            font-size: 18px;
            border-radius: 5px;
        }
        .login-form button:hover {
            background-color: #0b7dda;
        }
        .role-selection {
            margin-top: 15px;
        }
        .user-list {
            margin-top: 20px;
            text-align: left;
            padding-left: 20px;
        }
    </style>
</head>
<body>

    <!-- Login Form -->
    <div id="loginForm" class="login-form">
        <h2>Login</h2>
        <input type="text" id="username" placeholder="Enter your username">
        
        <div class="role-selection">
            <label for="role">Are you a player?</label><br>
            <input type="radio" id="player" name="role" value="player" checked> Player
            <input type="radio" id="admin" name="role" value="admin"> Admin
        </div>
        
        <button onclick="login()">Login</button>
        <div id="loginError" style="color: red; margin-top: 10px;"></div>
    </div>

    <!-- Game Interface -->
    <div class="game-container" id="gameContainer" style="display: none;">
        <h1>Russian Roulette</h1>
        <div class="game-message" id="message">Ready to play? Press the button to pull the trigger.</div>
        <div class="game-message" id="score">Points: 0</div>
        <button class="button" id="triggerButton" onclick="pullTrigger()">Pull the Trigger</button>
        <button class="button" id="logoutButton" onclick="logout()">Logout</button>
    </div>

    <!-- Admin View -->
    <div id="adminView" style="display: none;">
        <h2>Admin Dashboard</h2>
        <div class="user-list" id="userList"></div>
        <div id="banControls"></div>
        <h3>10-Streak Players:</h3>
        <div id="streakPlayersList"></div>
        <button class="button" onclick="logout()">Logout</button>
    </div>

    <script>
        // Simulated user database (for simplicity)
        const users = {
            player1: { username: 'player1', role: 'player', points: 0, winStreak: 0, banned: false },
            Openworld: { username: 'Openworld', password: 'openworldofficial123', role: 'admin', points: 0, winStreak: 0, banned: false }
        };
        let currentUser = null; // Current logged-in user
        let allUsers = []; // To store logged-in users
        let streakPlayers = []; // To store players with 10 points streak

        // Show the login form
        function showLoginForm() {
            document.getElementById('loginForm').style.display = 'block';
            document.getElementById('gameContainer').style.display = 'none';
            document.getElementById('adminView').style.display = 'none';
        }

        // Show the game interface
        function showGame() {
            document.getElementById('loginForm').style.display = 'none';
            document.getElementById('gameContainer').style.display = 'block';
            document.getElementById('adminView').style.display = 'none';
        }

        // Show the admin dashboard
        function showAdminDashboard() {
            document.getElementById('loginForm').style.display = 'none';
            document.getElementById('gameContainer').style.display = 'none';
            document.getElementById('adminView').style.display = 'block';
            document.getElementById('userList').innerHTML = 'Logged In Users:<br>' + allUsers.join('<br>');
            document.getElementById('banControls').innerHTML = `
                <h3>Ban/Unban Players:</h3>
                <select id="playerToBan">
                    ${allUsers.filter(user => users[user].role === 'player').map(user => `<option value="${user}">${user}</option>`).join('')}
                </select>
                <button class="button" onclick="banPlayer()">Ban Player</button>
                <button class="button" onclick="unbanPlayer()">Unban Player</button>
            `;
            document.getElementById('streakPlayersList').innerHTML = streakPlayers.join('<br>') || 'No players with 10 streak yet.';
        }

        // Login logic
        function login() {
            const username = document.getElementById('username').value;
            const isAdmin = document.getElementById('admin').checked;

            // Check if admin
            if (isAdmin) {
                const password = prompt("Please enter admin password:");
                if (password === users.Openworld.password) {
                    currentUser = users.Openworld;
                    showAdminDashboard();
                    return;
                } else {
                    alert("Incorrect admin password!");
                    return;
                }
            }

            // Check if player
            if (username && !users[username]) {
                users[username] = { username: username, role: 'player', points: 0, winStreak: 0, banned: false };
                allUsers.push(username); // Add to list of logged-in users
                currentUser = users[username];
                showGame();
            } else if (users[username] && users[username].role === 'player' && !users[username].banned) {
                currentUser = users[username];
                showGame();
            } else {
                alert("Username already taken or banned.");
            }
        }

        // Logout function
        function logout() {
            currentUser = null;
            showLoginForm();
        }

        // Game logic
        function pullTrigger() {
            if (currentUser.banned) {
                alert("You are banned. Please contact Openworld to unban.");
                return;
            }

            const gunChamber = Math.floor(Math.random() * 6) + 1;
            const shot = Math.floor(Math.random() * 6) + 1;

            if (shot === gunChamber) {
                currentUser.points -= 1;
                currentUser.winStreak = 0;
                document.getElementById("message").innerHTML = "BANG! -1 point.";
                document.getElementById("score").innerHTML = `Points: ${currentUser.points}`;
                currentUser.banned = true; // Ban the player
                alert("You lost! You've been banned.");
            } else {
                currentUser.points += 1;
                currentUser.winStreak += 1;
                document.getElementById("message").innerHTML = "Click. You're safe!";
                document.getElementById("score").innerHTML = `Points: ${currentUser.points}`;
                if (currentUser.winStreak === 10) {
                    streakPlayers.push(currentUser.username); // Add to 10-streak list
                    document.getElementById("message").innerHTML = "You've earned a Golden Pass!";
                    document.getElementById("score").innerHTML = `Points: ${currentUser.points}`;
                }
            }
        }

        // Ban a player
        function banPlayer() {
            const playerToBan = document.getElementById('playerToBan').value;
            if (playerToBan && users[playerToBan]) {
                users[playerToBan].banned = true;
                alert(`${playerToBan} has been banned.`);
                showAdminDashboard(); // Refresh the admin dashboard
            }
        }

        // Unban a player
        function unbanPlayer() {
            const playerToUnban = document.getElementById('playerToBan').value;
            if (playerToUnban && users[playerToUnban]) {
                users[playerToUnban].banned = false;
                alert(`${playerToUnban} has been unbanned.`);
                showAdminDashboard(); // Refresh the admin dashboard
            }
        }

        // Show the login form on page load
        showLoginForm();
    </script>

</body>
</html>
